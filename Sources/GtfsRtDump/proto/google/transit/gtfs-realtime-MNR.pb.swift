// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/google/transit/gtfs-realtime-MNR.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TransitRealtime_MnrStopTimeUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///can add additional fields here without having to //extend StopTimeUpdate again
  var track: String {
    get {return _track ?? String()}
    set {_track = newValue}
  }
  /// Returns true if `track` has been explicitly set.
  var hasTrack: Bool {return self._track != nil}
  /// Clears the value of `track`. Subsequent reads from it will return its default value.
  mutating func clearTrack() {self._track = nil}

  var trainStatus: String {
    get {return _trainStatus ?? String()}
    set {_trainStatus = newValue}
  }
  /// Returns true if `trainStatus` has been explicitly set.
  var hasTrainStatus: Bool {return self._trainStatus != nil}
  /// Clears the value of `trainStatus`. Subsequent reads from it will return its default value.
  mutating func clearTrainStatus() {self._trainStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _track: String? = nil
  fileprivate var _trainStatus: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension TransitRealtime_MnrStopTimeUpdate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in gtfs-realtime-MNR.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TransitRealtime_TripUpdate.StopTimeUpdate {

  var TransitRealtime_mnrStopTimeUpdate: TransitRealtime_MnrStopTimeUpdate {
    get {return getExtensionValue(ext: TransitRealtime_Extensions_mnr_stop_time_update) ?? TransitRealtime_MnrStopTimeUpdate()}
    set {setExtensionValue(ext: TransitRealtime_Extensions_mnr_stop_time_update, value: newValue)}
  }
  /// Returns true if extension `TransitRealtime_Extensions_mnr_stop_time_update`
  /// has been explicitly set.
  var hasTransitRealtime_mnrStopTimeUpdate: Bool {
    return hasExtensionValue(ext: TransitRealtime_Extensions_mnr_stop_time_update)
  }
  /// Clears the value of extension `TransitRealtime_Extensions_mnr_stop_time_update`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTransitRealtime_mnrStopTimeUpdate() {
    clearExtensionValue(ext: TransitRealtime_Extensions_mnr_stop_time_update)
  }

}

// MARK: - File's ExtensionMap: TransitRealtime_Gtfs_u45Realtime_u45Mnr_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TransitRealtime_Gtfs_u45Realtime_u45Mnr_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TransitRealtime_Extensions_mnr_stop_time_update
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let TransitRealtime_Extensions_mnr_stop_time_update = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TransitRealtime_MnrStopTimeUpdate>, TransitRealtime_TripUpdate.StopTimeUpdate>(
  _protobuf_fieldNumber: 1005,
  fieldName: "transit_realtime.mnr_stop_time_update"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "transit_realtime"

extension TransitRealtime_MnrStopTimeUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MnrStopTimeUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "track"),
    2: .same(proto: "trainStatus"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._track) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._trainStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._track {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._trainStatus {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TransitRealtime_MnrStopTimeUpdate, rhs: TransitRealtime_MnrStopTimeUpdate) -> Bool {
    if lhs._track != rhs._track {return false}
    if lhs._trainStatus != rhs._trainStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
