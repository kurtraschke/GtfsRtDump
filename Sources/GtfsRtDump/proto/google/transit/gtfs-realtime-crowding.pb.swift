// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/google/transit/gtfs-realtime-crowding.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// crowding information in raw form.  This allows
/// for more flexibility then levels and percents.
/// Note that either count or capacity may be missing!!!
struct TransitRealtime_CrowdingDescriptor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// raw count of passengers onboard vehicle
  var estimatedCount: Int32 {
    get {return _estimatedCount ?? 0}
    set {_estimatedCount = newValue}
  }
  /// Returns true if `estimatedCount` has been explicitly set.
  var hasEstimatedCount: Bool {return self._estimatedCount != nil}
  /// Clears the value of `estimatedCount`. Subsequent reads from it will return its default value.
  mutating func clearEstimatedCount() {self._estimatedCount = nil}

  /// estimated capacity of vehicle considering current
  /// crowding restrictions
  var estimatedCapacity: Int32 {
    get {return _estimatedCapacity ?? 0}
    set {_estimatedCapacity = newValue}
  }
  /// Returns true if `estimatedCapacity` has been explicitly set.
  var hasEstimatedCapacity: Bool {return self._estimatedCapacity != nil}
  /// Clears the value of `estimatedCapacity`. Subsequent reads from it will return its default value.
  mutating func clearEstimatedCapacity() {self._estimatedCapacity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _estimatedCount: Int32? = nil
  fileprivate var _estimatedCapacity: Int32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension TransitRealtime_CrowdingDescriptor: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in gtfs-realtime-crowding.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TransitRealtime_VehiclePosition {

  var TransitRealtime_crowdingDescriptor: TransitRealtime_CrowdingDescriptor {
    get {return getExtensionValue(ext: TransitRealtime_Extensions_crowding_descriptor) ?? TransitRealtime_CrowdingDescriptor()}
    set {setExtensionValue(ext: TransitRealtime_Extensions_crowding_descriptor, value: newValue)}
  }
  /// Returns true if extension `TransitRealtime_Extensions_crowding_descriptor`
  /// has been explicitly set.
  var hasTransitRealtime_crowdingDescriptor: Bool {
    return hasExtensionValue(ext: TransitRealtime_Extensions_crowding_descriptor)
  }
  /// Clears the value of extension `TransitRealtime_Extensions_crowding_descriptor`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTransitRealtime_crowdingDescriptor() {
    clearExtensionValue(ext: TransitRealtime_Extensions_crowding_descriptor)
  }

}

// MARK: - File's ExtensionMap: TransitRealtime_Gtfs_u45Realtime_u45Crowding_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TransitRealtime_Gtfs_u45Realtime_u45Crowding_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TransitRealtime_Extensions_crowding_descriptor
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let TransitRealtime_Extensions_crowding_descriptor = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TransitRealtime_CrowdingDescriptor>, TransitRealtime_VehiclePosition>(
  _protobuf_fieldNumber: 1006,
  fieldName: "transit_realtime.crowding_descriptor"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "transit_realtime"

extension TransitRealtime_CrowdingDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CrowdingDescriptor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "estimated_count"),
    2: .standard(proto: "estimated_capacity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._estimatedCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._estimatedCapacity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._estimatedCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._estimatedCapacity {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TransitRealtime_CrowdingDescriptor, rhs: TransitRealtime_CrowdingDescriptor) -> Bool {
    if lhs._estimatedCount != rhs._estimatedCount {return false}
    if lhs._estimatedCapacity != rhs._estimatedCapacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
